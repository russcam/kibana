/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License;
 * you may not use this file except in compliance with the Elastic License.
 */

// generated from (old!) class text files in
// https://github.com/elastic/elasticsearch/tree/237650e9c054149fd08213b38a81a3666c1868e5/modules/lang-painless/src/main/resources/org/elasticsearch/painless/spi
const classes = [
  { name: 'def' },
  { name: 'BigDecimal' },
  { name: 'BigInteger' },
  { name: 'MathContext' },
  { name: 'RoundingMode' },
  { name: 'AttributedCharacterIterator' },
  { name: 'CharacterIterator' },
  { name: 'Annotation' },
  { name: 'AttributedCharacterIterator.Attribute' },
  { name: 'AttributedString' },
  { name: 'Bidi' },
  { name: 'BreakIterator' },
  { name: 'ChoiceFormat' },
  { name: 'CollationElementIterator' },
  { name: 'CollationKey' },
  { name: 'Collator' },
  { name: 'DateFormat' },
  { name: 'DateFormat.Field' },
  { name: 'DateFormatSymbols' },
  { name: 'DecimalFormat' },
  { name: 'DecimalFormatSymbols' },
  { name: 'FieldPosition' },
  { name: 'Format' },
  { name: 'Format.Field' },
  { name: 'MessageFormat' },
  { name: 'MessageFormat.Field' },
  { name: 'Normalizer' },
  { name: 'NumberFormat' },
  { name: 'NumberFormat.Field' },
  { name: 'ParsePosition' },
  { name: 'RuleBasedCollator' },
  { name: 'SimpleDateFormat' },
  { name: 'StringCharacterIterator' },
  { name: 'Normalizer.Form' },
  { name: 'ParseException' },
  { name: 'Appendable' },
  { name: 'CharSequence' },
  { name: 'Comparable' },
  { name: 'Iterable' },
  { name: 'Boolean' },
  { name: 'Byte' },
  { name: 'Character' },
  { name: 'Character.Subset' },
  { name: 'Character.UnicodeBlock' },
  { name: 'Double' },
  { name: 'Enum' },
  { name: 'Float' },
  { name: 'Integer' },
  { name: 'Long' },
  { name: 'Math' },
  { name: 'Number' },
  { name: 'Object' },
  { name: 'Short' },
  { name: 'StackTraceElement' },
  { name: 'StrictMath' },
  { name: 'String' },
  { name: 'StringBuffer' },
  { name: 'StringBuilder' },
  { name: 'System' },
  { name: 'Void' },
  { name: 'Character.UnicodeScript' },
  { name: 'ArithmeticException' },
  { name: 'ArrayIndexOutOfBoundsException' },
  { name: 'ArrayStoreException' },
  { name: 'ClassCastException' },
  { name: 'ClassNotFoundException' },
  { name: 'CloneNotSupportedException' },
  { name: 'EnumConstantNotPresentException' },
  { name: 'Exception' },
  { name: 'IllegalAccessException' },
  { name: 'IllegalArgumentException' },
  { name: 'IllegalMonitorStateException' },
  { name: 'IllegalStateException' },
  { name: 'IllegalThreadStateException' },
  { name: 'IndexOutOfBoundsException' },
  { name: 'InstantiationException' },
  { name: 'InterruptedException' },
  { name: 'NegativeArraySizeException' },
  { name: 'NoSuchFieldException' },
  { name: 'NoSuchMethodException' },
  { name: 'NullPointerException' },
  { name: 'NumberFormatException' },
  { name: 'ReflectiveOperationException' },
  { name: 'RuntimeException' },
  { name: 'SecurityException' },
  { name: 'StringIndexOutOfBoundsException' },
  { name: 'TypeNotPresentException' },
  { name: 'UnsupportedOperationException' },
  { name: 'ChronoLocalDate' },
  { name: 'ChronoLocalDateTime' },
  { name: 'Chronology' },
  { name: 'ChronoPeriod' },
  { name: 'ChronoZonedDateTime' },
  { name: 'Era' },
  { name: 'AbstractChronology' },
  { name: 'HijrahChronology' },
  { name: 'HijrahDate' },
  { name: 'IsoChronology' },
  { name: 'JapaneseChronology' },
  { name: 'JapaneseDate' },
  { name: 'JapaneseEra' },
  { name: 'MinguoChronology' },
  { name: 'MinguoDate' },
  { name: 'ThaiBuddhistChronology' },
  { name: 'ThaiBuddhistDate' },
  { name: 'HijrahEra' },
  { name: 'IsoEra' },
  { name: 'MinguoEra' },
  { name: 'ThaiBuddhistEra' },
  { name: 'Clock' },
  { name: 'Duration' },
  { name: 'Instant' },
  { name: 'LocalDate' },
  { name: 'LocalDateTime' },
  { name: 'LocalTime' },
  { name: 'MonthDay' },
  { name: 'OffsetDateTime' },
  { name: 'OffsetTime' },
  { name: 'Period' },
  { name: 'Year' },
  { name: 'YearMonth' },
  { name: 'ZonedDateTime' },
  { name: 'ZoneId' },
  { name: 'ZoneOffset' },
  { name: 'DayOfWeek' },
  { name: 'Month' },
  { name: 'DateTimeException' },
  { name: 'DateTimeFormatter' },
  { name: 'DateTimeFormatterBuilder' },
  { name: 'DecimalStyle' },
  { name: 'FormatStyle' },
  { name: 'ResolverStyle' },
  { name: 'SignStyle' },
  { name: 'TextStyle' },
  { name: 'DateTimeParseException' },
  { name: 'Temporal' },
  { name: 'TemporalAccessor' },
  { name: 'TemporalAdjuster' },
  { name: 'TemporalAmount' },
  { name: 'TemporalField' },
  { name: 'TemporalQuery' },
  { name: 'TemporalUnit' },
  { name: 'IsoFields' },
  { name: 'JulianFields' },
  { name: 'TemporalAdjusters' },
  { name: 'TemporalQueries' },
  { name: 'ValueRange' },
  { name: 'WeekFields' },
  { name: 'ChronoField' },
  { name: 'ChronoUnit' },
  { name: 'UnsupportedTemporalTypeException' },
  { name: 'ZoneOffsetTransition' },
  { name: 'ZoneOffsetTransitionRule' },
  { name: 'ZoneRules' },
  { name: 'ZoneRulesProvider' },
  { name: 'ZoneOffsetTransitionRule.TimeDefinition' },
  { name: 'ZoneRulesException' },
  { name: 'Collection' },
  { name: 'Comparator' },
  { name: 'Deque' },
  { name: 'Enumeration' },
  { name: 'EventListener' },
  { name: 'Formattable' },
  { name: 'Iterator' },
  { name: 'List' },
  { name: 'ListIterator' },
  { name: 'Map' },
  { name: 'Map.Entry' },
  { name: 'NavigableMap' },
  { name: 'NavigableSet' },
  { name: 'Observer' },
  { name: 'PrimitiveIterator' },
  { name: 'PrimitiveIterator.OfDouble' },
  { name: 'PrimitiveIterator.OfInt' },
  { name: 'PrimitiveIterator.OfLong' },
  { name: 'Spliterator' },
  { name: 'Spliterator.OfPrimitive' },
  { name: 'Spliterator.OfDouble' },
  { name: 'Spliterator.OfInt' },
  { name: 'Spliterator.OfLong' },
  { name: 'Queue' },
  { name: 'RandomAccess' },
  { name: 'Set' },
  { name: 'SortedMap' },
  { name: 'SortedSet' },
  { name: 'AbstractCollection' },
  { name: 'AbstractList' },
  { name: 'AbstractMap' },
  { name: 'AbstractMap.SimpleEntry' },
  { name: 'AbstractMap.SimpleImmutableEntry' },
  { name: 'AbstractQueue' },
  { name: 'AbstractSequentialList' },
  { name: 'AbstractSet' },
  { name: 'ArrayDeque' },
  { name: 'ArrayList' },
  { name: 'Arrays' },
  { name: 'Base64' },
  { name: 'Base64.Decoder' },
  { name: 'Base64.Encoder' },
  { name: 'BitSet' },
  { name: 'Calendar' },
  { name: 'Calendar.Builder' },
  { name: 'Collections' },
  { name: 'Currency' },
  { name: 'Date' },
  { name: 'Dictionary' },
  { name: 'DoubleSummaryStatistics' },
  { name: 'EventListenerProxy' },
  { name: 'EventObject' },
  { name: 'FormattableFlags' },
  { name: 'Formatter' },
  { name: 'GregorianCalendar' },
  { name: 'HashMap' },
  { name: 'HashSet' },
  { name: 'Hashtable' },
  { name: 'IdentityHashMap' },
  { name: 'IntSummaryStatistics' },
  { name: 'LinkedHashMap' },
  { name: 'LinkedHashSet' },
  { name: 'LinkedList' },
  { name: 'Locale' },
  { name: 'Locale.Builder' },
  { name: 'Locale.LanguageRange' },
  { name: 'LongSummaryStatistics' },
  { name: 'Objects' },
  { name: 'Observable' },
  { name: 'Optional' },
  { name: 'OptionalDouble' },
  { name: 'OptionalInt' },
  { name: 'OptionalLong' },
  { name: 'PriorityQueue' },
  { name: 'Random' },
  { name: 'SimpleTimeZone' },
  { name: 'Spliterators' },
  { name: 'Stack' },
  { name: 'StringJoiner' },
  { name: 'StringTokenizer' },
  { name: 'TimeZone' },
  { name: 'TreeMap' },
  { name: 'TreeSet' },
  { name: 'UUID' },
  { name: 'Vector' },
  { name: 'Formatter.BigDecimalLayoutForm' },
  { name: 'Locale.Category' },
  { name: 'Locale.FilteringMode' },
  { name: 'ConcurrentModificationException' },
  { name: 'DuplicateFormatFlagsException' },
  { name: 'EmptyStackException' },
  { name: 'FormatFlagsConversionMismatchException' },
  { name: 'FormatterClosedException' },
  { name: 'IllegalFormatCodePointException' },
  { name: 'IllegalFormatConversionException' },
  { name: 'IllegalFormatException' },
  { name: 'IllegalFormatFlagsException' },
  { name: 'IllegalFormatPrecisionException' },
  { name: 'IllegalFormatWidthException' },
  { name: 'IllformedLocaleException' },
  { name: 'InputMismatchException' },
  { name: 'MissingFormatArgumentException' },
  { name: 'MissingFormatWidthException' },
  { name: 'MissingResourceException' },
  { name: 'NoSuchElementException' },
  { name: 'TooManyListenersException' },
  { name: 'UnknownFormatConversionException' },
  { name: 'UnknownFormatFlagsException' },
  { name: 'Pattern' },
  { name: 'Matcher' },
  { name: 'BaseStream' },
  { name: 'Collector' },
  { name: 'DoubleStream' },
  { name: 'DoubleStream.Builder' },
  { name: 'IntStream' },
  { name: 'IntStream.Builder' },
  { name: 'LongStream' },
  { name: 'LongStream.Builder' },
  { name: 'Stream' },
  { name: 'Stream.Builder' },
  { name: 'Collectors' },
  { name: 'Collector.Characteristics' },
  { name: 'org.joda.time.ReadableInstant' },
  { name: 'org.joda.time.ReadableDateTime' },
  { name: 'BiConsumer' },
  { name: 'BiFunction' },
  { name: 'BinaryOperator' },
  { name: 'BiPredicate' },
  { name: 'BooleanSupplier' },
  { name: 'Consumer' },
  { name: 'DoubleBinaryOperator' },
  { name: 'DoubleConsumer' },
  { name: 'DoubleFunction' },
  { name: 'DoublePredicate' },
  { name: 'DoubleSupplier' },
  { name: 'DoubleToIntFunction' },
  { name: 'DoubleToLongFunction' },
  { name: 'DoubleUnaryOperator' },
  { name: 'Function' },
  { name: 'IntBinaryOperator' },
  { name: 'IntConsumer' },
  { name: 'IntFunction' },
  { name: 'IntPredicate' },
  { name: 'IntSupplier' },
  { name: 'IntToDoubleFunction' },
  { name: 'IntToLongFunction' },
  { name: 'IntUnaryOperator' },
  { name: 'LongBinaryOperator' },
  { name: 'LongConsumer' },
  { name: 'LongFunction' },
  { name: 'LongPredicate' },
  { name: 'LongSupplier' },
  { name: 'LongToDoubleFunction' },
  { name: 'LongToIntFunction' },
  { name: 'LongUnaryOperator' },
  { name: 'ObjDoubleConsumer' },
  { name: 'ObjIntConsumer' },
  { name: 'ObjLongConsumer' },
  { name: 'Predicate' },
  { name: 'Supplier' },
  { name: 'ToDoubleBiFunction' },
  { name: 'ToDoubleFunction' },
  { name: 'ToIntBiFunction' },
  { name: 'ToIntFunction' },
  { name: 'ToLongBiFunction' },
  { name: 'ToLongFunction' },
  { name: 'UnaryOperator' },
  { name: 'void' },
  { name: 'boolean' },
  { name: 'byte' },
  { name: 'short' },
  { name: 'char' },
  { name: 'int' },
  { name: 'long' },
  { name: 'float' },
  { name: 'double' },
  { name: 'def' },
  { name: 'org.elasticsearch.common.geo.GeoPoint' },
  { name: 'org.elasticsearch.index.fielddata.ScriptDocValues.Strings' },
  { name: 'org.elasticsearch.index.fielddata.ScriptDocValues.Longs' },
  { name: 'org.elasticsearch.index.fielddata.ScriptDocValues.Doubles' },
  { name: 'org.elasticsearch.index.fielddata.ScriptDocValues.GeoPoints' },
  { name: 'org.elasticsearch.index.fielddata.ScriptDocValues.Booleans' },
  { name: 'org.elasticsearch.painless.FeatureTest' },
];

const classNames = classes.map(c => {
  return c.name;
});

const Definition = {
  isSimpleType: (localctx, lexer) => {
    return classNames.indexOf(lexer.text) > -1;
  },
  classes,
};

module.exports = Definition;
